let Database = require('./database');
let {spawn} = require('child_process');

class Shodan {
    constructor() {
        this.table = 'shodan';
        this.ip = 'ip';
        this.hostnames = 'hostnames';
        this.transport = 'transport';
        this.city = 'city';
        this.country = 'country';
        this.domains = 'domains';
        this.org = 'org';
        this.os = 'os';
        this.port = 'port';
        this.isp = 'isp';
        this.name = 'name';
    }

    async searchShodan(term, filter) {
        let database = new Database();

        let result = await this.doSearch(term, filter);

        if (result.length === 0) {
            if (filter === 'ip') {
                let python = await spawn('python', ['../shodan/host.py', term]);
                await python.stdout.on('data', function (data) {
                    console.log(data.toString());
                });
                await python.on('close', (code) => {
                    console.log(`Child process close all stdio with code ${code}`);
                })
            } else {
                let python = await spawn('python', ['../shodan/search.py', term]);
                await python.stdout.on('data', function (data) {
                    console.log(data.toString());
                });
                await python.on('close', (code) => {
                    console.log(`Child process close all stdio with code ${code}`);
                })
            }

            result = await this.doSearch(term, filter);
            console.log(result);
        }

        return result;
    }

    async doSearch(term, filter) {
        let database = new Database();

        let searchTerm = '%' + term + '%';
        let query = `SELECT * FROM ${this.table} WHERE ${filter} LIKE ?`;
        let options = [searchTerm];
        return await database.execute(query, options)
            .then(response => {
                return response;
            })
            .catch(err => {
                throw(err);
            })
            .finally(() => database.close());
    }

    async getShodan(ip) {
        let database = new Database();

        let query = `SELECT * FROM ${this.table} WHERE ${this.ip} = ?`;
        let options = [ip];
        return await database.execute(query, options)
            .then(response => {
                return response[0];
            })
            .catch(err => {
                throw(err);
            })
            .finally(() => database.close());
    }
}

module.exports = Shodan;
