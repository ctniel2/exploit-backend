let Database = require('./database');
let passwordHash = require('password-hash');
let pwnedPasswords = require('pwnedpasswords');

class Users {
  constructor() {
    this.table = 'users';
    this.id = 'id';
    this.firstName = 'firstName';
    this.lastName = 'lastName';
    this.apiKey = 'apiKey';
    this.password = 'password';
    this.isAdmin = 'isAdmin';
    this.email = 'email';
  }

  async getUsers() {
      let database = new Database();

      let query = `SELECT * FROM ${this.table}`;

      return await database.execute(query)
          .then(response => {
              return response;
          })
          .catch(err => {
              throw(err);
          })
          .finally(() => database.close());
  }

  async getUser(uid) {
    let database = new Database();

    let query = `SELECT * FROM ${this.table} WHERE ${this.id} = ?`;
    let options = [uid];

    return await database.execute(query, options)
      .then(response => {
        return response[0];
      })
      .catch(err => {
        throw(err);
      })
      .finally(() => database.close());
  }

  async login(email, password) {
    let database = new Database();

    if (this.verifyPassword(password)) {
      let query = `SELECT * FROM ${this.table} WHERE ${this.email} = ?`;
      let options = [email];

      return await database.execute(query, options)
          .then(response => {
            return response[0];
          })
          .catch(err => {
            throw(err);
          })
          .finally(() => database.close());
    } else {
      return {}
    }
  }

  async addUser(email, firstName, lastName, password) {
    let database = new Database();

    return await pwnedPasswords(password)
        .then(async count => {
          if (count) {
            return Error;
          } else {
            let hashedPassword = passwordHash.generate(password);

            let query = `INSERT INTO ${this.table} (${this.email}, ${this.firstName}, ${this.lastName}, ${this.password}, ${this.isAdmin}) VALUES (?,?,?,?,?)`;
            let options = [email, firstName, lastName, hashedPassword, 0];

            return await database.execute(query, options)
                .then(response => {
                  console.log(response);
                  return "Success";
                })
                .catch(err => {
                  throw(err);
                })
                .finally(() => database.close());
          }
        })
        .catch(err => {
          throw(err);
        })


  }

  async updateUser(email, firstName, lastName, shodanAPI, password, uid) {
    let database = new Database();

    let query, options;

    if(password) {
      let hashedPassword = passwordHash.generate(password);

      query = `UPDATE ${this.table} SET ${this.email} = ?, ${this.firstName} = ?, ${this.lastName} = ?, ${this.apiKey} = ?, ${this.password} = ? WHERE ${this.id} = ?`;
      options = [email, firstName, lastName, shodanAPI, hashedPassword, uid];
    } else {
      query = `UPDATE ${this.table} SET ${this.email} = ?, ${this.firstName} = ?, ${this.lastName} = ?, ${this.apiKey} = ? WHERE ${this.id} = ?`;
      options = [email, firstName, lastName, shodanAPI, uid];
    }

    return await database.execute(query, options)
      .then(response => {
        console.log(response);
        return "Success";
      })
      .catch(err => {
        throw(err);
      })
      .finally(() => database.close());
  }

  async removeUser(id) {
      let database = new Database();

      let query = `DELETE FROM ${this.table} WHERE ${this.id} = ?`;
      let options = [id];

      return await database.execute(query, options)
          .then(response => {
              return {message: 'Success'};
          })
          .catch(err => {
              throw(err);
          })
          .finally(() => database.close());
  }

  async verifyPassword(email, password) {
    let database = new Database();

    let query = `SELECT ${this.password} FROM ${this.table} WHERE ${this.email} = ?`;
    let options = [email];
    let result = {};

    await database.execute(query, options)
        .then(response => {
          result = response[0];
        })
        .catch(err => {
          throw(err);
        })
        .finally(() => database.close());

    return passwordHash.verify(password, result);
  }

}

module.exports = Users;
